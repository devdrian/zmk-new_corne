#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };

        hmr_left: hmr_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <7 8 9 10 11 12 22 23 24 25 26 27 36 37 38 39 40 41 45 46 47>;
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
        };

        hmr_right: hmr_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 13 14 15 16 17 18 28 29 30 31 32 33 42 43 44>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&kp TAB         &kp Q                 &kp W                     &kp E                 &kp R              &kp T                        &none         &kp Y        &kp U                &kp I                   &kp O                       &kp P                           &kp SINGLE_QUOTE
&kp ESC         &hmr_left LEFT_ALT A  &hmr_left LEFT_CONTROL S  &hmr_left LEFT_GUI D  &hmr_left LSHFT F  &kp G                 &none  &none  &none  &kp H        &hmr_right RSHIFT J  &hmr_right RIGHT_GUI K  &hmr_right RIGHT_CONTROL L  &hmr_right RIGHT_ALT SEMICOLON  &kp BACKSPACE
&kp LEFT_SHIFT  &kp Z                 &kp X                     &kp C                 &kp V              &kp B        &none           &none         &kp N        &kp M                &kp COMMA               &kp DOT                     &kp FSLH                        &kp TAB
                                                                &kp LCTRL             &kp LEFT_GUI       &lt 1 SPACE                                &lt 2 ENTER  &kp LEFT_SHIFT       &kp RALT
            >;
        };

        Symbolic {
            bindings = <
&trans  &kp LS(LBRC)   &kp LS(RBRC)  &kp LBKT      &kp RBKT      &none                     &trans          &none   &kp SQT       &kp LS(PRCNT)  &none          &none         &trans
&trans  &kp LS(POUND)  &kp LS(DLLR)  &kp LS(LPAR)  &kp LS(RPAR)  &none             &trans  &trans  &trans  &none   &kp LS(PLUS)  &kp MINUS      &kp LS(UNDER)  &kp EQUAL     &trans
&trans  &kp LS(CARET)  &kp LS(AMPS)  &kp LS(EXCL)  &kp LS(AT)    &none   &trans            &trans          &none   &kp GRAVE     &kp LS(TILDE)  &kp BSLH       &kp LS(PIPE)  &trans
                                     &trans        &trans        &trans                                    &trans  &trans        &trans
            >;
        };

        NumNav {
            bindings = <
&trans  &none   &kp N1  &kp N2  &kp N3  &none                     &trans          &kp K_MUTE        &kp C_VOL_DN  &kp C_VOL_UP  &none      &none  &trans
&trans  &kp N0  &kp N4  &kp N5  &kp N6  &none             &trans  &trans  &trans  &kp LEFT          &kp DOWN      &kp UP        &kp RIGHT  &none  &trans
&trans  &none   &kp N7  &kp N8  &kp N9  &none   &trans            &trans          &kp C_PLAY_PAUSE  &kp C_PREV    &kp C_NEXT    &none      &none  &trans
                        &trans  &trans  &trans                                    &trans            &trans        &trans
            >;
        };

        Function {
            bindings = <
&trans  &kp F1  &kp F2   &kp F3   &kp F4   &none                   &none         &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &none  &trans
&trans  &kp F5  &kp F6   &kp F7   &kp F8   &none            &none  &none  &none  &none       &none         &none         &none         &none  &trans
&trans  &kp F9  &kp F10  &kp F11  &kp F12  &none   &none           &none         &none       &none         &none         &none         &none  &trans
                         &trans   &trans   &trans                                &trans      &trans        &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        Function {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
