#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 15   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    time-to-max-speed-ms = <200>;       // 300                   // 0
    acceleration-exponent = <0>;
    delay-ms = <0>;
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <150>;
};

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&caps_word>;

            label = "shift-caps";
        };

        hmr_left: hmr_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <7 8 9 10 11 12 22 23 24 25 26 27 36 37 38 39 40 41 45 46 47>;
            tapping-term-ms = <220>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
        };

        hmr_right: hmr_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 13 14 15 16 17 18 28 29 30 31 32 33 42 43 44>;
        };

        hyper_meh: hyper_meh {
            compatible = "zmk,behavior-tap-dance";
            label = "HYPER_MEH";
            #binding-cells = <0>;
            bindings = <&kp LS(LA(LC(LGUI)))>, <&kp LS(LA(LCTRL))>;
        };

        shift_auto_caps: shift_auto_caps {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT_AUTO_CAPS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-while-undecided;
            tapping-term-ms = <180>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    zip_scroll_scaler: zip_scroll_scaler {
        compatible = "zmk,input-processor-scaler";
        #input-processor-cells = <2>;
        type = <INPUT_EV_REL>;
        codes = <INPUT_REL_WHEEL INPUT_REL_HWHEEL>;

        // track-remainders;
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&none          &kp Q  &kp W                 &kp E                     &kp R                 &kp T                                         &none         &kp Y          &kp U                   &kp I                       &kp O                   &kp P          &none
&hyper_meh     &kp A  &hmr_left LEFT_ALT S  &hmr_left LEFT_CONTROL D  &hmr_left LEFT_GUI F  &kp G                                  &none  &none  &none  &kp H          &hmr_right RIGHT_GUI J  &hmr_right RIGHT_CONTROL K  &hmr_right RIGHT_ALT L  &kp SEMICOLON  &to 5
&kp LG(GRAVE)  &kp Z  &kp X                 &kp C                     &kp V                 &kp B                         &none           &none         &kp N          &kp M                   &kp COMMA                   &kp DOT                 &kp FSLH       &none
                                            &kp ESCAPE                &lt 1 SPACE           &shift_auto_caps LSHIFT CAPS                                &kp BACKSPACE  &lt 2 ENTER             &kp TAB
            >;
        };

        Symbolic {
            bindings = <
&trans  &kp LS(LBRC)   &kp LS(RBRC)                   &kp LBKT                                     &kp RBKT                                  &none                     &trans          &none   &kp STAR                   &kp LS(PRCNT)                   &kp SINGLE_QUOTE            &kp LS(SINGLE_QUOTE)  &trans
&trans  &kp LS(POUND)  &hmr_left LEFT_ALT LS(DOLLAR)  &hmr_left LEFT_CONTROL LS(LEFT_PARENTHESIS)  &hmr_left LEFT_GUI LS(RIGHT_PARENTHESIS)  &none             &trans  &trans  &trans  &none   &hmr_right RIGHT_GUI PLUS  &hmr_right RIGHT_CONTROL MINUS  &hmr_right RIGHT_ALT UNDER  &kp EQUAL             &trans
&trans  &kp LS(CARET)  &kp LS(AMPS)                   &kp LS(EXCL)                                 &kp LS(AT)                                &none   &trans            &trans          &none   &kp GRAVE                  &kp LS(TILDE)                   &kp BSLH                    &kp LS(PIPE)          &trans
                                                      &trans                                       &trans                                    &trans                                    &trans  &trans                     &trans
            >;
        };

        NumNav {
            bindings = <
&trans  &none   &kp N1                       &kp N2                           &kp N3                       &none                     &trans          &kp C_MUTE        &kp C_VOL_DN  &kp C_VOL_UP  &none      &none  &trans
&trans  &kp N0  &hmr_left LEFT_ALT NUMBER_4  &hmr_left LEFT_CONTROL NUMBER_5  &hmr_left LEFT_GUI NUMBER_6  &none             &trans  &trans  &trans  &kp LEFT          &kp DOWN      &kp UP        &kp RIGHT  &none  &trans
&trans  &none   &kp N7                       &kp N8                           &kp N9                       &none   &trans            &trans          &kp C_PLAY_PAUSE  &kp C_PREV    &kp C_NEXT    &none      &none  &trans
                                             &trans                           &trans                       &trans                                    &trans            &trans        &trans
            >;
        };

        Function {
            bindings = <
&trans  &kp F1  &kp F2   &kp F3   &kp F4   &none                   &none         &bt BT_CLR              &bt BT_SEL 0                       &bt BT_SEL 1            &bt BT_SEL 2            &none                   &trans
&trans  &kp F5  &kp F6   &kp F7   &kp F8   &none            &none  &none  &none  &kp LS(LA(LC(LG(F1))))  &kp LS(LA(LC(LG(F2))))             &kp LC(LA(LS(LG(F3))))  &kp LS(LA(LC(LG(F4))))  &kp LS(LA(LC(LG(F5))))  &trans
&trans  &kp F9  &kp F10  &kp F11  &kp F12  &none   &none           &none         &rgb_ug RGB_TOG         &rgb_ug RGB_COLOR_HSB(125,100,50)  &rgb_ug RGB_EFR         &rgb_ug RGB_EFF         &none                   &trans
                         &trans   &trans   &trans                                &trans                  &trans                             &trans
            >;
        };

        Mouse {
            bindings = <
&none  &none  &msc SCRL_LEFT  &mmv MOVE_UP    &msc SCRL_RIGHT  &msc SCRL_UP                    &none         &none   &mkp MB4   &mkp MB5   &none      &none  &none
&none  &none  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_DOWN           &none  &none  &none  &none   &mkp LCLK  &mkp MCLK  &mkp RCLK  &none  &none
&none  &none  &none           &none           &none            &none           &none           &none         &none   &none      &none      &none      &none  &none
                              &trans          &trans           &trans                                        &trans  &trans     &trans
            >;
        };

        Gaming {
            bindings = <
&kp TAB           &kp Q  &kp W  &kp E       &kp R      &kp T                             &none         &kp Y          &kp U      &kp I      &kp O    &kp P     &none
&kp LEFT_SHIFT    &kp A  &kp S  &kp D       &kp F      &kp G                      &none  &none  &none  &kp H          &kp J      &kp K      &kp L    &kp SEMI  &to 0
&kp LEFT_CONTROL  &kp Z  &kp X  &kp C       &kp V      &kp B             &none           &none         &kp N          &kp M      &kp COMMA  &kp DOT  &kp FSLH  &none
                                &kp ESCAPE  &kp SPACE  &kp LEFT_COMMAND                                &kp BACKSPACE  &kp ENTER  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        Function {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
